{
  "hash": "0c141dbf416509df7f3c54b4dd7ca24a",
  "result": {
    "engine": "jupyter",
    "markdown": "# Python basics\n\n\n\nThis chapter introduces the fundamental concepts and basic syntax of the Python programming language. All the code covered here is part of the standard Python language and does not require any additional packages or libraries. Thus the Python discussed here forms the foundation for not only analyzing data in Python, but also for writing any kind of Python code. \n\nWhile the chapter covers several different key concepts and syntax of Python, we focus on a subset of features that are most central for data analysis, rather than covering the full range of Python's capabilities.  Becoming proficient in the basic Python covered in this chapter will be important as a basis for writing code in subsequent chapters, so make sure to practice and understand these concepts thoroughly.\n\nBy the end of this chapter, you should be comfortable with writing basic Python code, performing simple calculations, and understanding how Python represents and manipulates different types of data. These foundational skills will prepare you for more advanced topics in data analysis that are covered in the rest of the book. \n\n\n\n## Expressions \n\nA **Python expression** is **any piece of code that produces a value.**. For example, the following is an expression that simply creates the number 21.\n\n::: {#720af566 .cell execution_count=1}\n``` {.python .cell-code}\n21\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n21\n```\n:::\n:::\n\n\nSimilarly, an expression could be a series of mathematical operations that evaluate to number. For example, if want want to add 5 plus 2 and then multiple the result by 6 we can write:  \n\n::: {#3d65565f .cell execution_count=2}\n``` {.python .cell-code}\n6 * (5 + 2) \n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n42\n```\n:::\n:::\n\n\nAs mentioned above, the defining features of a *python expression* is that it produces a value. Expressions are one of the fundamental building blocks of data analysis and they will appear frequently throughout this book. \n\n\n::: {.callout-tip title=\"Exercise\" #exercise-python_basics-expressions}\n\n\nWhat would happen if we remove the parenthesis from the expression we ran above and instead run `6 * 5 + 2`. See if you can predict what the result will be and then try it out in Python by running the code in a code cell and see if you get the result you predicted. \n\n:::\n\n\n::: {.callout-note title=\"Solution\" #solution-python_basics-expressions collapse=\"true\"}\n\n::: {#68d22027 .cell execution_count=3}\n``` {.python .cell-code}\n6 * 5 + 2\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n32\n```\n:::\n:::\n\n\nThe result is 32, which makes sense because in the standard order of mathematical operations, multiplication occurs before addition so we multiple 6 * 5 and get 30, and then we add 2 to get 32. \n\n:::\n\n\n\n### Mathematical expressions\n\nThe expressions shown above were all \"mathematical expressions\" because they involve calculating numeric quantities. We can also write statements that will do operations on text and other types of data which we will describe more below. But first, let's explore mathematical expressions a bit more. Below is a table of some of the mathematical operations that are part of\n\n| Operation        | Symbol | Example     | Result |\n|------------------|--------|-------------|--------|\n| Addition         |   +    | 5 + 3       |   8    |\n| Subtraction      |   -    | 10 - 4      |   6    |\n| Multiplication   |   *    | 7 * 2       |  14    |\n| Division         |   /    | 12 / 5      |   2.4  |\n| Exponentiation   |   **   | 3 ** 2      |   9    |\n| Remainder        |   %    | 10 % 3      |   1    |\n\n: Python mathematical operators {#tbl-math-ops}\n\n\n::: {.callout-tip title=\"Exercise\" #exercise-python-math_expression}\n\nWhat is the remainder from dividing 365 by 7? Please write some Python code that produces the answer.\n\n:::\n\n\n::: {.callout-note title=\"Solution\" #solution-python-math_expression collapse=\"true\"}\n\n::: {#6c760a8a .cell execution_count=4}\n``` {.python .cell-code}\n365 % 7\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n1\n```\n:::\n:::\n\n\n:::\n\n\n\n## Syntax \n\n**Syntax** is the set of rules that defines how Python code **must** be written. One that think of syntax as the grammar of the Python programming language. In order for Python to be able to run your code, it **must** use the correct syntax. \n\nTo illustrate this, let's calculate the value of 8 squared ($8^2$) which hopefully you remember is equal to the value of 64. As shown @tbl-math-ops, if we want to take a value `x` to the power `y` (i.e., to calculate $x^y$) we use the syntax `x**y`. So, if we wanted to calculate $8^2$ we would write the following Python code: \n\n::: {#0f48ddba .cell execution_count=5}\n``` {.python .cell-code}\n8**2\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n64\n```\n:::\n:::\n\n\nSince we have written the correct syntax, the code runs and the result of 64 is calculated as expected. \n\nHowever, if we accidentially put an extra space between the two `*` symbols, Python will not know how to interpret the expression and we will get a syntax error as shown below:\n\n::: {#96fbfb4f .cell execution_count=6}\n``` {.python .cell-code}\n\"hey\"\n\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n'hey'\n```\n:::\n:::\n\n\n",
    "supporting": [
      "python_basics_files"
    ],
    "filters": [],
    "includes": {}
  }
}