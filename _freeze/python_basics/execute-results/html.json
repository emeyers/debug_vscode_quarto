{
  "hash": "f4c0be669250d759e8e916640b8317f7",
  "result": {
    "engine": "jupyter",
    "markdown": "# Python basics\n\n\n\nThis chapter introduces the fundamental concepts and basic syntax of the Python programming language. All the code covered here is part of the standard Python language and does not require any additional packages or libraries. Thus the Python discussed here forms the foundation for not only analyzing data in Python, but also for writing any kind of Python code. \n\nWhile the chapter covers several different key concepts and syntax of Python, we focus on a subset of features that are most central for data analysis, rather than covering the full range of Python's capabilities.  Becoming proficient in the basic Python covered in this chapter will be important as a basis for writing code in subsequent chapters, so make sure to practice and understand these concepts thoroughly.\n\nBy the end of this chapter, you should be comfortable with writing basic Python code, performing simple calculations, and understanding how Python represents and manipulates different types of data. These foundational skills will prepare you for more advanced topics in data analysis that are covered in the rest of the book. \n\n\n\n## Expressions \n\nA **Python expression** is **any piece of code that produces a value.**. For example, the following is an expression that simply creates the number 21.\n\n::: {#a4e9a745 .cell execution_count=1}\n``` {.python .cell-code}\n21\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n21\n```\n:::\n:::\n\n\nSimilarly, an expression could be a series of mathematical operations that evaluate to number. For example, if want want to add 5 plus 2 and then multiple the result by 6 we can write:  \n\n::: {#5725745a .cell execution_count=2}\n``` {.python .cell-code}\n6 * (5 + 2) \n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n42\n```\n:::\n:::\n\n\nAs mentioned above, the defining features of a *python expression* is that it produces a value. Expressions are one of the fundamental building blocks of data analysis and they will appear frequently throughout this book. \n\n\n::: {.callout-tip title=\"Exercise\" #exercise-python_basics-expressions}\n\n\nWhat would happen if we remove the parenthesis from the expression we ran above and instead run `6 * 5 + 2`. See if you can predict what the result will be and then try it out in Python by running the code in a code cell and see if you get the result you predicted. \n\n:::\n\n\n::: {.callout-note title=\"Solution\" #solution-python_basics-expressions collapse=\"true\"}\n\n::: {#cfa9ccd3 .cell execution_count=3}\n``` {.python .cell-code}\n6 * 5 + 2\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n32\n```\n:::\n:::\n\n\nThe result is 32, which makes sense because in the standard order of mathematical operations, multiplication occurs before addition so we multiple 6 * 5 and get 30, and then we add 2 to get 32. \n\n:::\n\n\n\n### Mathematical expressions\n\nThe expressions shown above were all \"mathematical expressions\" because they involve calculating numeric quantities. We can also write statements that will do operations on text and other types of data which we will describe more below. But first, let's explore mathematical expressions a bit more. Below is a table of some of the mathematical operations that are part of\n\n| Operation        | Symbol | Example     | Result |\n|------------------|--------|-------------|--------|\n| Addition         |   +    | 5 + 3       |   8    |\n| Subtraction      |   -    | 10 - 4      |   6    |\n| Multiplication   |   *    | 7 * 2       |  14    |\n| Division         |   /    | 12 / 5      |   2.4  |\n| Exponentiation   |   **   | 3 ** 2      |   9    |\n| Remainder        |   %    | 10 % 3      |   1    |\n\n: Python mathematical operators {#tbl-math-ops}\n\n\n::: {.callout-tip title=\"Exercise\" #exercise-python-math_expression}\n\nWhat is the remainder from dividing 365 by 7? Please write some Python code that produces the answer.\n\n:::\n\n\n::: {.callout-note title=\"Solution\" #solution-python-math_expression collapse=\"true\"}\n\n::: {#e65d4e9f .cell execution_count=4}\n``` {.python .cell-code}\n365 % 7\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n1\n```\n:::\n:::\n\n\n:::\n\n\n\n## Syntax \n\n**Syntax** is the set of rules that defines how Python code **must** be written. One that think of syntax as the grammar of the Python programming language. In order for Python to be able to run your code, it **must** use the correct syntax. \n\nTo illustrate this, let's calculate the value of 8 squared ($8^2$) which hopefully you remember is equal to the value of 64. As shown @tbl-math-ops, if we want to take a value `x` to the power `y` (i.e., to calculate $x^y$) we use the syntax `x**y`. So, if we wanted to calculate $8^2$ we would write the following Python code: \n\n::: {#a11c2e73 .cell execution_count=5}\n``` {.python .cell-code}\n8**2\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n64\n```\n:::\n:::\n\n\nSince we have written the correct syntax, the code runs and the result of 64 is calculated as expected. \n\nHowever, if we accidentially put an extra space between the two `*` symbols, Python will not know how to interpret the expression and we will get a syntax error as shown below:\n\n::: {#8f3730fa .cell execution_count=6}\n``` {.python .cell-code}\n\"hey\"\n\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n'hey'\n```\n:::\n:::\n\n\nERROR NUMBER 1: If python produces an error message with a ^ this will make it so that Quarto document will not be able to render to a pdf :(\n\nFor example, if I use a string without a closing quote this will produce this type of error\n\n`\"hey`   \n\nLikewise if I have a cell with the following it will produce this type of error: \n\n`\"8 * * 2`  \n\n\n\n\nWhen there is a syntax error, Python will print out `SyntaxError` and give you an indication where the syntax error has occurred using a ^ symbol.^[The reason this is a syntax error is because Python inteprets a single `*` symbol as a multiplicaiton symbol. Thus it is trying to multiple 8 by another multiplication symbol `*`, which gives an error since one can only multiply two numbers together.] As we can see here, Python is trying to show that the syntax error has occurred due to the extra space between the * symbols. \n\n\nWhen there is a syntax error, Python will print out `SyntaxError` and give you an indication where the syntax error has occurred using a ^ symbol.^[The reason this is a syntax error is because Python inteprets a single `*` symbol as a multiplicaiton symbol. Thus it is trying to multiple 8 by another multiplication symbol `*`, which gives an error since one can only multiply two numbers together.] As we can see here, Python is trying to show that the syntax error has occurred due to the extra space between the * symbols. \n\nThe ability to be able to spot and fix syntax errors is a fundamental skill you will develop as become proficient in analyzing data in Python. \n\n\n\n## Assignment statements\n\n\nAn *assignment statement* is a line of code that is used to store a value in a named **variable**. We can then refer back to this variable name to retrieve the value we have stored. \n\nTo assign a value to a variable we use the `=` symbol. For example, the following code assigns the value `10` to the variable `a`:\n\n::: {#4cd24d24 .cell execution_count=7}\n``` {.python .cell-code}\na = 10\n```\n:::\n\n\nWe can then refer back to the variable `a` later in our code to retrive the stored value. For example, if we just write `a` by itself on the last line of our Python code cell, it will print out the value stored in `a`. \n\n::: {#640cc3a7 .cell execution_count=8}\n``` {.python .cell-code}\na\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n10\n```\n:::\n:::\n\n\nAs we can see, the value printed out is `10` which is the value we had previously stored in the name `a`. \n\nIf we were to assign the name `a` to another value, it will overwrite the previously stored value and `a` will store the new value.\n\n::: {#b0899014 .cell execution_count=9}\n``` {.python .cell-code}\na = 21\na\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n21\n```\n:::\n:::\n\n\nWe an also do mathematical operations on values stored in variables, such as adding and multiplying variables together. For example, we can assign the variable `h` to store the value 24, and the variable `d` to store the value 7, and then we can multiple these together and store the result in the variable `t`.\n\n::: {#9b489568 .cell execution_count=10}\n``` {.python .cell-code}\nh = 24\nd = 7\nt = h * d\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n168\n```\n:::\n:::\n\n\n::: {.callout-tip title=\"Exercise\" #exercise-python_basics-assignment_statements}\n\n\nIn the above code we calculated `t = h * d`. Which of the following do you think will happen to the value stored in `t` if we change the value of h to 3? I.e., if we run the following code, what do you think it will print out? \n\n::: {#363ee231 .cell execution_count=11}\n``` {.python .cell-code}\nh = 3\nt\n```\n:::\n\n\na. The value of `t` will be change to be 21  (i.e., `7 * 3`).\nb. The value of `t` will not change and will still contain `168`.\nc. Something else will happen (e.g., Python will give an error). \n\n:::\n\n\n::: {.callout-note title=\"Solution\" #solution--python_basics-assignment_statements collapse=\"true\"}\n\n::: {#c5c2cf1f .cell execution_count=12}\n``` {.python .cell-code}\nh = 3\nt\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n168\n```\n:::\n:::\n\n\nAs you can see, the value of `t` did not change. This illustrates an important point that once a value is calculated and stored in a variable it will not change if the variable that were used as part of the calculation are updated! \n\n:::\n\n\n### Variable names\n\nVariable names in Python must follow certain rules:\n\n- Must start with a letter (a-z, A-Z) or an underscore (_), but not a number.\n- Can contain letters, numbers, and underscores.\n- Cannot contain spaces or special characters (like `@`, `#`, `$`, etc.).\n- Cannot be a reserved Python keyword that are part of the Python language (like `for`, `if`, `class`, etc.).\n\nIf these rules are not followed, Python will produce a syntax error\n\nIt's also important to use meaningful variable names. For example, `t` is technically a valid variable name but it is not descriptive, while `total_hours` is much clearer. Using meaningful names makes your code easier to read and understand.\n\n\n::: {.callout-tip title=\"Exercise\" #exercise-python_basics-min_wage}\n\n The minimum wage in the United States in 2025 is $7.25. If someone works 40 hours per week for all 52 weeks in a year, what would there yearly earnings be? Please calculate by creating *meaningful* variable names for:  \n  \n1. The minimum wage amount   \n2. The number of hours in a week    \n3. The number of weeks in a year   \n \n Then calculate the total yearly wage and store this result in another meaningful variable name, and print out the value stored in this last variable. Hint: Using underscores `_` in your variable names is highly encouraged to make them more readible. \n\n:::\n\n\n::: {.callout-note title=\"Solution\" #solution-python_basics-min_wage collapse=\"true\"}\n\n::: {#14ef7b26 .cell execution_count=13}\n``` {.python .cell-code}\nhours = 24\ndays = 7\ntotal_hours_in_a_week = hours * days\ntotal_hours_in_a_week\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n168\n```\n:::\n:::\n\n\n:::\n\n\n\n\n## Comments\n\nAnother very useful feature in Python is the ability to add **comments** to your code. Comments are lines in your code that are ignored by Python when your code runs. They are used to explain what your code is doing, make notes to yourself, or leave instructions for others who may read your code in the future.\n\nIn Python, you create a comment by starting the line with the `#` symbol. Anything after the `#` on that line will be treated as a comment and not executed.\n\nFor example:\n\n::: {#f05066db .cell execution_count=14}\n``` {.python .cell-code}\n# The code below calculates the number of seconds in a day\nseconds_in_a_day = 60 * 60 * 24\n\nseconds_in_a_day\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n86400\n```\n:::\n:::\n\n\nWe will use comments extensively throughout this book to explain what code is doing and to make our code easier to understand. Adding clear comments is a good habit that will help both you and others who read your code in the future, so we strongly encourage you to add comments liberally for all code you write. \n\n\n\n## Functions (call expressions)\n\nA **function** is a reusable piece of code that performs a specific task. You can think of a function as a \"machine\" that takes some input, does something with it, and then gives you an output. \n\nPython comes with many built-in functions that you can use right away, and you can also load in additional functions in packages that other people have written. You can also write own functions, which is a topic we will discuss later in this book. \n\nTo use a function, you \"call\" it by writing its name followed by parentheses. If the function needs information to do its job, you put that information (called \"arguments\") inside the parentheses.\n\nFor example, the `abs()` function take in a number and returns the absolute value of the number. \n\n::: {#1a01bf43 .cell execution_count=15}\n``` {.python .cell-code}\nabs(-10)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n10\n```\n:::\n:::\n\n\nSome functions can take in multiple arguments. When multiple arguments are provided, they are separated by commas within the parentheses. For example, the `min()` function can take several numbers and will return the smallest one:\n\n::: {#8eae524e .cell execution_count=16}\n``` {.python .cell-code}\nmin(10, 2, 87, 5, 90)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n2\n```\n:::\n:::\n\n\nAnother useful function is the `print()` function for displaying multiple pieces of information in a single Jupyter notebook code cell. By default, Jupyter will only display the result of the last line in a code cell. If you want to display multiple values or add custom messages, you can use the `print()` function. \n\nFor example, the code below will print both the numbers `2` and `3` in the same code cell. If we did not use the `print()` function, only the number `3` would be printed since it is the last line in the cell, but the number 2 would not be printed because it is on the last line in the cell.\n\n::: {#73674066 .cell execution_count=17}\n``` {.python .cell-code}\n# We need to call print() explicitly here to print the value of \n# 2 since it is not on the last line of the code cell\n\nprint(2)  \n\n\n\n# The value of 3 will be printed here without needing to call \n# the print() function because it is the last line in the cell\n\n3\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n3\n```\n:::\n:::\n\n\n::: {.callout-tip title=\"Exercise\" #exercise-python_basics-print}\n\nTry using the `print()` function to display both a message and a value in the same output. For example, print the message \"The answer is:\" followed by the result of `6 * 7`. \n\n:::\n\n\n::: {.callout-note title=\"Solution\" #solution-python_basics-print collapse=\"true\"}\n\n::: {#d593e03c .cell execution_count=18}\n``` {.python .cell-code}\nprint(\"The answer is:\")\n6 * 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe answer is:\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n42\n```\n:::\n:::\n\n\n::: {#df4eb1f3 .cell execution_count=19}\n``` {.python .cell-code}\n# We can also print multiple pieces of text on a single line by \n# passing multiple arguments to the print() function: \n\nprint(\"The answer is:\", 6 * 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe answer is: 42\n```\n:::\n:::\n\n\n:::\n\n\n## Data types\n\nPython is able to process many different types of data, referred to as \"data types\".  So, far we have only explored numeric data. Let's continue exploring numerical data in a little more detial and then we will go on to examine other types of data. \n\n\n### Numbers\n\nPython uses two different formats to store numerical data known as \"integers\" and \"floating-point numbers\".\n\n- **Integers** (`int`): Whole numbers without a decimal point, such as `5`, `-3`, or `1000`.\n- **Floating-point numbers** (`float`): Numbers that have a decimal point, such as `3.14`, `-0.5`, or `2.0`.\n\nWe can tell if a number is a floating point number (i.e., a \"float\") by seeing if there is a decimal point at the end of the number when we print out the number. \n\n::: {#4061feab .cell execution_count=20}\n``` {.python .cell-code}\n# This is an integer, which we can tell becaues there is no decimal point\n5\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n5\n```\n:::\n:::\n\n\n::: {#3aaf5881 .cell execution_count=21}\n``` {.python .cell-code}\n# Although we are dividing two integers, the result is a floating point number\n# which we can tell becaues there is a decimal point\n\n10/2\n\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n5.0\n```\n:::\n:::\n\n\nWe can also use the `type()` function to check if a number is an integer or a floating point number. \n\n::: {#5f63ca0a .cell execution_count=22}\n``` {.python .cell-code}\n# This is a floating point number\n\ntype(5.0)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nfloat\n```\n:::\n:::\n\n\nOK to here...\n\n\nWhen analyzing the data, usually it does not matter if Python is storing a number as an integer or a floating point number since Python does the math sensibly and converts between integers and floating point numbers as needed. However, internally Python is representing these number is quite different ways. \n\nMore imporantly is to know that there are some limitations to the way Python stores both integers and floats. In particular, both of these types of numbers are represented using a finite amount of memory, so there is a largest number integer that can be represented and a limit to the precision of floating-point numbers. For most practical purposes, these limits are very large, but you may encounter issues with extremely large numbers or with floating-point arithmetic where results are not exactly as expected due to rounding errors.\n\nFor example, if we multiple intergers that are too long, we can get a `ValueError` which indicates that Python is running into problems representing an integer this large.\n\n::: {#4b085abc .cell execution_count=23}\n``` {.python .cell-code}\n# There is a limited size to integers (although the size is pretty large)\n\n1234567 ** 890 \n\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ValueError</span>                                Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">~\\Desktop\\git_repos\\books_to_write\\debug_vscode_quarto\\.venv\\Lib\\site-packages\\IPython\\core\\formatters.py:770</span>, in <span class=\"ansi-cyan-fg\">PlainTextFormatter.__call__</span><span class=\"ansi-blue-fg\">(self, obj)</span>\n<span class=\"ansi-green-fg\">    763</span> stream = StringIO()\n<span class=\"ansi-green-fg\">    764</span> printer = pretty.RepresentationPrinter(stream, <span style=\"color:rgb(0,135,0)\">self</span>.verbose,\n<span class=\"ansi-green-fg\">    765</span>     <span style=\"color:rgb(0,135,0)\">self</span>.max_width, <span style=\"color:rgb(0,135,0)\">self</span>.newline,\n<span class=\"ansi-green-fg\">    766</span>     max_seq_length=<span style=\"color:rgb(0,135,0)\">self</span>.max_seq_length,\n<span class=\"ansi-green-fg\">    767</span>     singleton_pprinters=<span style=\"color:rgb(0,135,0)\">self</span>.singleton_printers,\n<span class=\"ansi-green-fg\">    768</span>     type_pprinters=<span style=\"color:rgb(0,135,0)\">self</span>.type_printers,\n<span class=\"ansi-green-fg\">    769</span>     deferred_pprinters=<span style=\"color:rgb(0,135,0)\">self</span>.deferred_printers)\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">770</span> <span class=\"ansi-yellow-bg\">printer</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">pretty</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">obj</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">    771</span> printer.flush()\n<span class=\"ansi-green-fg\">    772</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> stream.getvalue()\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">~\\Desktop\\git_repos\\books_to_write\\debug_vscode_quarto\\.venv\\Lib\\site-packages\\IPython\\lib\\pretty.py:386</span>, in <span class=\"ansi-cyan-fg\">RepresentationPrinter.pretty</span><span class=\"ansi-blue-fg\">(self, obj)</span>\n<span class=\"ansi-green-fg\">    383</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> <span style=\"color:rgb(0,135,0)\">cls</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> _get_mro(obj_class):\n<span class=\"ansi-green-fg\">    384</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">cls</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">self</span>.type_pprinters:\n<span class=\"ansi-green-fg\">    385</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># printer registered in self.type_pprinters</span>\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">386</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">type_pprinters</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">cls</span><span class=\"ansi-yellow-bg\">]</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">obj</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">cycle</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">    387</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg\">    388</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># deferred printer</span>\n<span class=\"ansi-green-fg\">    389</span>         printer = <span style=\"color:rgb(0,135,0)\">self</span>._in_deferred_types(<span style=\"color:rgb(0,135,0)\">cls</span>)\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">~\\Desktop\\git_repos\\books_to_write\\debug_vscode_quarto\\.venv\\Lib\\site-packages\\IPython\\lib\\pretty.py:786</span>, in <span class=\"ansi-cyan-fg\">_repr_pprint</span><span class=\"ansi-blue-fg\">(obj, p, cycle)</span>\n<span class=\"ansi-green-fg\">    784</span> <span style=\"font-style:italic\" class=\"ansi-yellow-fg\">\"\"\"A pprint that just redirects to the normal repr function.\"\"\"</span>\n<span class=\"ansi-green-fg\">    785</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Find newlines and replace them with p.break_()</span>\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">786</span> output = <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">repr</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">obj</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">    787</span> lines = output.splitlines()\n<span class=\"ansi-green-fg\">    788</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> p.group():\n\n<span class=\"ansi-red-fg\">ValueError</span>: Exceeds the limit (4300 digits) for integer string conversion; use sys.set_int_max_str_digits() to increase the limit</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "python_basics_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}